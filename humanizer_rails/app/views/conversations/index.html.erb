<div class="conversation-browser">
  <!-- Header Section -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6 transition-colors">
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">📚 Conversation Archive</h1>
        <p class="text-gray-600 dark:text-gray-300 mt-2">Browse, search, and manage imported conversations</p>
      </div>
      <div class="flex space-x-3">
        <%= link_to "📥 Import", new_conversation_import_path, class: "bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors" %>
        <%= link_to "📊 Stats", conversations_stats_path, class: "border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors" %>
      </div>
    </div>

    <!-- Advanced Search Interface -->
    <%= form_with url: conversations_path, method: :get, local: true, class: "space-y-6", id: "advanced-search-form" do |form| %>
      
      <!-- Primary Search Row -->
      <div class="grid grid-cols-1 lg:grid-cols-5 gap-4">
        <!-- Search Query -->
        <div class="lg:col-span-3">
          <%= form.text_field :search, 
                              placeholder: "Search conversations, messages, and content...", 
                              value: params[:search],
                              class: "w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors" %>
        </div>
        
        <!-- Quick Actions -->
        <div class="lg:col-span-2 flex gap-2">
          <%= form.submit "🔍 Search", class: "bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors" %>
          <%= link_to "Clear", conversations_path, class: "border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" %>
          <button type="button" id="toggle-advanced" class="text-purple-600 dark:text-purple-400 px-3 py-2 rounded-lg hover:bg-purple-50 dark:hover:bg-purple-900/20 transition-colors">
            <span id="advanced-text">⚙️ Advanced</span>
          </button>
        </div>
      </div>

      <!-- Advanced Search Panel (Hidden by default) -->
      <div id="advanced-panel" class="hidden bg-gray-50 dark:bg-gray-800 rounded-lg p-6 space-y-6 transition-all">
        
        <!-- Search Scope Selection -->
        <div>
          <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">🎯 Search Scope</h3>
          <div class="flex flex-wrap gap-4">
            <label class="flex items-center">
              <%= form.check_box :search_title, 
                                 { checked: params[:search_title] != '0', class: "mr-2 text-purple-600 focus:ring-purple-500" }, 
                                 'true', '0' %>
              <span class="text-sm text-gray-700 dark:text-gray-300">Title</span>
            </label>
            <label class="flex items-center">
              <%= form.check_box :search_content, 
                                 { checked: params[:search_content] != '0', class: "mr-2 text-purple-600 focus:ring-purple-500" }, 
                                 'true', '0' %>
              <span class="text-sm text-gray-700 dark:text-gray-300">Message Content</span>
            </label>
            <label class="flex items-center">
              <%= form.check_box :search_semantic, 
                                 { checked: params[:search_semantic] == 'true', class: "mr-2 text-purple-600 focus:ring-purple-500" }, 
                                 'true', 'false' %>
              <span class="text-sm text-gray-700 dark:text-gray-300">Semantic Analysis</span>
            </label>
          </div>
        </div>

        <!-- Filter Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          
          <!-- Date Range Filters -->
          <div>
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">📅 Date Range</h3>
            <div class="space-y-2">
              <%= form.date_field :date_from, 
                                  value: params[:date_from],
                                  placeholder: "From date",
                                  class: "w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" %>
              <%= form.date_field :date_to, 
                                  value: params[:date_to],
                                  placeholder: "To date",
                                  class: "w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" %>
            </div>
          </div>

          <!-- User Roles Filter -->
          <div>
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">👤 User Roles</h3>
            <div class="space-y-2">
              <% ['user', 'assistant', 'system', 'tool'].each do |role| %>
                <label class="flex items-center">
                  <%= check_box_tag "roles[]", role, 
                                    params[:roles]&.include?(role), 
                                    class: "mr-2 text-purple-600 focus:ring-purple-500 text-sm" %>
                  <span class="text-sm text-gray-700 dark:text-gray-300 capitalize"><%= role %></span>
                </label>
              <% end %>
            </div>
          </div>

          <!-- Source & Metadata -->
          <div>
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">🔧 Source & Type</h3>
            <div class="space-y-2">
              <%= form.select :source_type, 
                              options_for_select([
                                ['All Sources', ''],
                                ['ChatGPT', 'chatgpt'],
                                ['Claude', 'claude'],
                                ['Anthropic', 'anthropic'],
                                ['Discourse', 'discourse'],
                                ['Manual', 'manual']
                              ], params[:source_type]),
                              {},
                              { class: "w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" } %>
              
              <%= form.text_field :gpt_model, 
                                  placeholder: "GPT Model (e.g., gpt-4, claude-3)",
                                  value: params[:gpt_model],
                                  class: "w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" %>
            </div>
          </div>

          <!-- Content Metrics -->
          <div>
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">📊 Content Size</h3>
            <div class="space-y-2">
              <div class="flex gap-2">
                <%= form.number_field :min_messages, 
                                      placeholder: "Min messages",
                                      value: params[:min_messages],
                                      min: 0,
                                      class: "w-1/2 px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" %>
                <%= form.number_field :max_messages, 
                                      placeholder: "Max messages",
                                      value: params[:max_messages],
                                      min: 0,
                                      class: "w-1/2 px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" %>
              </div>
              <div class="flex gap-2">
                <%= form.number_field :min_words, 
                                      placeholder: "Min words",
                                      value: params[:min_words],
                                      min: 0,
                                      class: "w-1/2 px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" %>
                <%= form.number_field :max_words, 
                                      placeholder: "Max words",
                                      value: params[:max_words],
                                      min: 0,
                                      class: "w-1/2 px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" %>
              </div>
            </div>
          </div>

          <!-- Tools & Attachments -->
          <div>
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">🛠️ Tools & Media</h3>
            <div class="space-y-2">
              <label class="flex items-center">
                <%= form.check_box :has_attachments, 
                                   { checked: params[:has_attachments] == 'true', class: "mr-2 text-purple-600 focus:ring-purple-500 text-sm" }, 
                                   'true', 'false' %>
                <span class="text-sm text-gray-700 dark:text-gray-300">Has Attachments</span>
              </label>
              <label class="flex items-center">
                <%= form.check_box :has_tools, 
                                   { checked: params[:has_tools] == 'true', class: "mr-2 text-purple-600 focus:ring-purple-500 text-sm" }, 
                                   'true', 'false' %>
                <span class="text-sm text-gray-700 dark:text-gray-300">Used Tools</span>
              </label>
              <%= form.text_field :gizmo_id, 
                                  placeholder: "Gizmo ID",
                                  value: params[:gizmo_id],
                                  class: "w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" %>
            </div>
          </div>

          <!-- Sorting Options -->
          <div>
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">🔀 Sort & Display</h3>
            <div class="space-y-2">
              <%= form.select :sort_by,
                              options_for_select([
                                ['Recent First', 'created_at'],
                                ['Title A-Z', 'title'],
                                ['Most Messages', 'messages'],
                                ['Most Words', 'words'],
                                ['Oldest First', 'created_at_asc']
                              ], params[:sort_by]),
                              {},
                              { class: "w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" } %>
              
              <%= form.select :per_page,
                              options_for_select([
                                ['10 per page', '10'],
                                ['20 per page', '20'],
                                ['50 per page', '50'],
                                ['100 per page', '100']
                              ], params[:per_page] || '20'),
                              {},
                              { class: "w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent" } %>
            </div>
          </div>
        </div>

        <!-- Advanced Actions -->
        <div class="flex justify-between items-center pt-4 border-t border-gray-200 dark:border-gray-600">
          <div class="flex gap-3">
            <%= form.submit "🔍 Apply Filters", class: "bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-colors" %>
            <%= link_to "🔄 Reset All", conversations_path, class: "border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 px-6 py-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" %>
          </div>
          <div class="text-xs text-gray-500 dark:text-gray-400">
            Advanced search with semantic analysis and flexible filtering
          </div>
        </div>
      </div>
    <% end %>
  </div>

  <!-- Results Summary & View Toggle -->
  <div class="bg-white rounded-lg shadow-md p-4 mb-6">
    <div class="flex justify-between items-center text-sm text-gray-600 mb-4">
      <div>
        Showing <%= @pagination[:total] %> conversations
        <% if params[:search].present? %>
          for "<strong><%= params[:search] %></strong>"
        <% end %>
      </div>
      <div class="flex items-center space-x-4">
        <!-- Quick Search -->
        <div class="flex items-center space-x-2">
          <input type="text" 
                 id="quick-search" 
                 placeholder="Quick filter..." 
                 class="text-sm border border-gray-300 rounded px-3 py-1 w-32 bg-white"
                 value="">
          <button id="clear-quick-search" 
                  class="text-gray-400 hover:text-gray-600 text-sm"
                  title="Clear filter">
            ✕
          </button>
        </div>
        
        <!-- Page Size Selector -->
        <div class="flex items-center space-x-2">
          <label class="text-xs text-gray-500">Show:</label>
          <select id="page-size-selector" class="text-sm border border-gray-300 rounded px-2 py-1 bg-white">
            <% [10, 20, 50, 100, 250, 500].each do |size| %>
              <option value="<%= size %>" <%= 'selected' if (params[:per_page] || '20').to_i == size %>>
                <%= size %>
              </option>
            <% end %>
          </select>
        </div>
        
        <!-- View Toggle -->
        <div class="flex bg-gray-100 rounded-lg p-1">
          <button id="table-view-btn" 
                  class="px-3 py-1 rounded text-sm font-medium transition-colors table-view-active">
            📊 Table
          </button>
          <button id="card-view-btn" 
                  class="px-3 py-1 rounded text-sm font-medium transition-colors">
            📋 Cards
          </button>
        </div>
        
        <div>
          Page <%= @pagination[:page] %> of <%= @pagination[:pages] %>
        </div>
      </div>
    </div>
    
    <!-- Top Pagination Controls -->
    <% if @pagination[:pages] > 1 %>
      <div class="flex justify-center border-t border-gray-200 pt-4">
        <%= render 'pagination_controls', pagination: @pagination %>
      </div>
    <% end %>
  </div>

  <!-- Conversation List -->
  <div id="conversations-container">
    <% if @conversations.any? %>
      
      <!-- Table View (Default) -->
      <div id="table-view" class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-gray-50 border-b border-gray-200">
              <tr>
                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors"
                    data-sort="title">
                  📖 Title 
                  <span class="sort-indicator">
                    <% if @current_sort&.dig(:column) == 'title' %>
                      <%= @current_sort[:direction] == 'asc' ? '↑' : '↓' %>
                    <% end %>
                  </span>
                </th>
                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors"
                    data-sort="message_count">
                  💬 Messages 
                  <span class="sort-indicator">
                    <% if @current_sort&.dig(:column) == 'message_count' %>
                      <%= @current_sort[:direction] == 'asc' ? '↑' : '↓' %>
                    <% end %>
                  </span>
                </th>
                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors"
                    data-sort="word_count">
                  📝 Words 
                  <span class="sort-indicator">
                    <% if @current_sort&.dig(:column) == 'word_count' %>
                      <%= @current_sort[:direction] == 'asc' ? '↑' : '↓' %>
                    <% end %>
                  </span>
                </th>
                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors"
                    data-sort="analyses_count">
                  💬 Comments 
                  <span class="sort-indicator">
                    <% if @current_sort&.dig(:column) == 'analyses_count' %>
                      <%= @current_sort[:direction] == 'asc' ? '↑' : '↓' %>
                    <% end %>
                  </span>
                </th>
                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors"
                    data-sort="embeddings_count">
                  🧠 Embeddings 
                  <span class="sort-indicator">
                    <% if @current_sort&.dig(:column) == 'embeddings_count' %>
                      <%= @current_sort[:direction] == 'asc' ? '↑' : '↓' %>
                    <% end %>
                  </span>
                </th>
                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors"
                    data-sort="media_count">
                  📎 Media 
                  <span class="sort-indicator">
                    <% if @current_sort&.dig(:column) == 'media_count' %>
                      <%= @current_sort[:direction] == 'asc' ? '↑' : '↓' %>
                    <% end %>
                  </span>
                </th>
                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors"
                    data-sort="created_at">
                  📅 Date 
                  <span class="sort-indicator">
                    <% if @current_sort&.dig(:column) == 'created_at' %>
                      <%= @current_sort[:direction] == 'asc' ? '↑' : '↓' %>
                    <% end %>
                  </span>
                </th>
                <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <% @conversations.each do |conversation| %>
                <tr class="hover:bg-gray-50 transition-colors conversation-row cursor-pointer"
                    data-conversation-id="<%= conversation.id %>"
                    data-href="<%= conversation_path(conversation) %>">
                  
                  <!-- Title with Source Badge -->
                  <td class="px-4 py-3">
                    <div class="flex items-center space-x-2">
                      <div class="flex-1 min-w-0">
                        <div class="font-medium text-gray-900 truncate">
                          <%= conversation.title %>
                        </div>
                        <div class="flex items-center space-x-2 mt-1">
                          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-<%= source_color(conversation.source_type) %>-100 text-<%= source_color(conversation.source_type) %>-800">
                            <%= conversation.source_type.humanize %>
                          </span>
                        </div>
                      </div>
                    </div>
                  </td>
                  
                  <!-- Message Count -->
                  <td class="px-4 py-3 text-center">
                    <span class="text-sm font-medium text-gray-900">
                      <%= conversation.message_count %>
                    </span>
                  </td>
                  
                  <!-- Word Count -->
                  <td class="px-4 py-3 text-center">
                    <span class="text-sm text-gray-900">
                      <%= number_with_delimiter(conversation.word_count) %>
                    </span>
                  </td>
                  
                  <!-- Comments (Analysis Count) -->
                  <td class="px-4 py-3 text-center">
                    <span class="text-sm text-gray-900">
                      <%= conversation.message_analyses.count %>
                    </span>
                  </td>
                  
                  <!-- Embeddings Count (Placeholder) -->
                  <td class="px-4 py-3 text-center">
                    <span class="text-sm text-gray-500">
                      -
                    </span>
                  </td>
                  
                  <!-- Media Count -->
                  <td class="px-4 py-3 text-center">
                    <span class="text-sm text-gray-900">
                      <%= conversation.messages.joins(:message_media).distinct.count %>
                    </span>
                  </td>
                  
                  <!-- Date -->
                  <td class="px-4 py-3 text-center">
                    <span class="text-sm text-gray-900">
                      <%= conversation.original_created_at&.strftime('%Y-%m-%d') || conversation.created_at.strftime('%Y-%m-%d') %>
                    </span>
                  </td>
                  
                  <!-- Actions -->
                  <td class="px-4 py-3 text-center">
                    <div class="flex items-center justify-center space-x-2">
                      <%= link_to "🔍", 
                                  select_messages_message_analysis_index_path(conversation_id: conversation.id),
                                  class: "text-blue-600 hover:text-blue-800 text-lg",
                                  title: "Analyze Messages",
                                  onclick: "event.stopPropagation()" %>
                      <%= link_to "🔮", 
                                  new_transformation_conversation_path(conversation),
                                  class: "text-purple-600 hover:text-purple-800 text-lg",
                                  title: "Transform",
                                  onclick: "event.stopPropagation()" %>
                      <%= link_to "📖", 
                                  new_book_conversation_path(conversation),
                                  class: "text-green-600 hover:text-green-800 text-lg",
                                  title: "Create Book",
                                  onclick: "event.stopPropagation()" %>
                    </div>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- Card View (Hidden by default) -->
      <div id="card-view" class="space-y-4 hidden">
        <% @conversations.each do |conversation| %>
          <div class="conversation-item bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">
            <%= link_to conversation_path(conversation), class: "block p-6" do %>
              <div class="flex justify-between items-start">
                <div class="flex-1">
                  <!-- Title and Source -->
                  <div class="flex items-center mb-2">
                    <h3 class="text-lg font-semibold text-gray-900 mr-3"><%= conversation.title %></h3>
                    <span class="attribute-badge bg-<%= source_color(conversation.source_type) %>-100 text-<%= source_color(conversation.source_type) %>-800">
                      <%= conversation.source_type.humanize %>
                    </span>
                  </div>
                  
                  <!-- Summary -->
                  <% if conversation.summary.present? %>
                    <p class="text-gray-600 mb-3 line-clamp-2"><%= conversation.summary %></p>
                  <% end %>
                  
                  <!-- Metadata -->
                  <div class="flex items-center space-x-4 text-sm text-gray-500">
                    <span>💬 <%= conversation.message_count %> messages</span>
                    <span>📝 <%= number_with_delimiter(conversation.word_count) %> words</span>
                    <% if conversation.original_created_at %>
                      <span>📅 <%= conversation.original_created_at.strftime('%B %d, %Y') %></span>
                    <% end %>
                    <span>📥 Imported <%= time_ago_in_words(conversation.created_at) %> ago</span>
                  </div>
                </div>
                
                <!-- Actions -->
                <div class="flex flex-col space-y-2 ml-6">
                  <div class="flex space-x-2">
                    <%= link_to "🔮 Transform", 
                                new_transformation_conversation_path(conversation),
                                class: "text-purple-600 hover:text-purple-700 text-sm font-medium",
                                onclick: "event.stopPropagation()" %>
                    <%= link_to "📖 To Book",
                                new_book_conversation_path(conversation),
                                class: "text-pink-600 hover:text-pink-700 text-sm font-medium",
                                onclick: "event.stopPropagation()" %>
                  </div>
                  <div class="text-xs text-gray-400">
                    ID: <%= conversation.id[0..7] %>...
                  </div>
                </div>
              </div>
              
              <!-- Message Preview -->
              <% if conversation.messages.any? %>
                <div class="mt-4 pt-4 border-t border-gray-100">
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <% conversation.messages.includes(:message_media).limit(3).each do |message| %>
                      <div class="bg-gray-50 rounded p-3">
                        <div class="flex items-center mb-2">
                          <span class="text-xs font-medium text-gray-600 uppercase">
                            <%= message.role %>
                          </span>
                          <% if message.message_media.any? %>
                            <span class="ml-2 text-xs text-blue-600">📎</span>
                          <% end %>
                        </div>
                        <p class="text-sm text-gray-700 line-clamp-3">
                          <%= truncate(message.content, length: 100) %>
                        </p>
                      </div>
                    <% end %>
                  </div>
                </div>
              <% end %>
            <% end %>
          </div>
        <% end %>
      </div>
      
    <% else %>
      <!-- Empty State -->
      <div class="bg-white rounded-lg shadow-md p-12 text-center">
        <div class="text-6xl mb-6">📚</div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">No conversations found</h3>
        <p class="text-gray-600 mb-6">
          <% if params[:search].present? %>
            No conversations match your search criteria. Try adjusting your filters.
          <% else %>
            Get started by importing your first conversation.
          <% end %>
        </p>
        <div class="space-x-3">
          <%= link_to "📥 Import Conversation", new_conversation_import_path, class: "bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors" %>
          <% if params[:search].present? %>
            <%= link_to "Clear Search", conversations_path, class: "border border-gray-300 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-50 transition-colors" %>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>

  <!-- Bottom Pagination -->
  <% if @pagination[:pages] > 1 %>
    <div class="mt-8 flex justify-center">
      <%= render 'pagination_controls', pagination: @pagination %>
    </div>
  <% end %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Safe element selection with error handling
  const toggleButton = document.getElementById('toggle-advanced');
  const advancedPanel = document.getElementById('advanced-panel');
  const advancedText = document.getElementById('advanced-text');
  const advancedForm = document.getElementById('advanced-search-form');
  
  // Exit early if required elements are not found
  if (!toggleButton || !advancedPanel || !advancedText || !advancedForm) {
    console.warn('Advanced search elements not found - skipping JavaScript initialization');
    return;
  }
  
  // Check if advanced panel should be open based on URL parameters
  try {
    const urlParams = new URLSearchParams(window.location.search);
    const advancedParams = [
      'search_title', 'search_content', 'search_semantic', 
      'date_from', 'date_to', 'gpt_model', 
      'min_messages', 'max_messages', 'min_words', 'max_words', 
      'has_attachments', 'has_tools', 'gizmo_id', 'source_type'
    ];
    
    // Check for roles array parameters separately
    const hasRoles = urlParams.getAll('roles[]').length > 0;
    const hasAdvancedParams = advancedParams.some(param => urlParams.has(param)) || hasRoles;
    
    if (hasAdvancedParams) {
      advancedPanel.classList.remove('hidden');
      advancedText.textContent = '⬆️ Simple';
    }
  } catch (error) {
    console.error('Error checking URL parameters:', error);
  }
  
  // Toggle button event listener
  toggleButton.addEventListener('click', function() {
    try {
      const isHidden = advancedPanel.classList.contains('hidden');
      
      if (isHidden) {
        advancedPanel.classList.remove('hidden');
        advancedText.textContent = '⬆️ Simple';
        
        // Set default search scope to title if none selected
        const titleCheckbox = document.querySelector('input[name="search_title"]');
        const contentCheckbox = document.querySelector('input[name="search_content"]');
        const semanticCheckbox = document.querySelector('input[name="search_semantic"]');
        
        if (titleCheckbox && contentCheckbox && semanticCheckbox) {
          if (!titleCheckbox.checked && !contentCheckbox.checked && !semanticCheckbox.checked) {
            titleCheckbox.checked = true;
          }
        }
      } else {
        advancedPanel.classList.add('hidden');
        advancedText.textContent = '⚙️ Advanced';
      }
    } catch (error) {
      console.error('Error toggling advanced panel:', error);
    }
  });
  
  // Auto-submit form on advanced changes
  try {
    const autoSubmitElements = advancedForm.querySelectorAll('input[type="checkbox"], select');
    
    autoSubmitElements.forEach(element => {
      element.addEventListener('change', function() {
        try {
          // Debounce auto-submit to avoid too many requests
          clearTimeout(window.advancedSearchTimeout);
          window.advancedSearchTimeout = setTimeout(() => {
            if (advancedPanel && !advancedPanel.classList.contains('hidden')) {
              // Only auto-submit if we have a search query or other criteria
              const searchInput = document.querySelector('input[name="search"]');
              
              if (searchInput) {
                const hasSearchQuery = searchInput.value && searchInput.value.trim() !== '';
                const hasFilters = Array.from(autoSubmitElements).some(el => {
                  try {
                    if (el.type === 'checkbox') {
                      return el.checked;
                    } else if (el.tagName === 'SELECT') {
                      return el.value && el.value !== '';
                    } else {
                      return el.value && el.value.trim() !== '';
                    }
                  } catch (e) {
                    console.warn('Error checking element value:', e);
                    return false;
                  }
                });
                
                if (hasSearchQuery || hasFilters) {
                  advancedForm.submit();
                }
              }
            }
          }, 500);
        } catch (error) {
          console.error('Error in auto-submit handler:', error);
        }
      });
    });
  } catch (error) {
    console.error('Error setting up auto-submit handlers:', error);
  }
  
  // View Toggle Functionality
  const tableViewBtn = document.getElementById('table-view-btn');
  const cardViewBtn = document.getElementById('card-view-btn');
  const tableView = document.getElementById('table-view');
  const cardView = document.getElementById('card-view');
  
  function switchToTableView() {
    if (tableView && cardView && tableViewBtn && cardViewBtn) {
      tableView.classList.remove('hidden');
      cardView.classList.add('hidden');
      tableViewBtn.classList.add('table-view-active');
      cardViewBtn.classList.remove('table-view-active');
      localStorage.setItem('conversations-view', 'table');
    }
  }
  
  function switchToCardView() {
    if (tableView && cardView && tableViewBtn && cardViewBtn) {
      tableView.classList.add('hidden');
      cardView.classList.remove('hidden');
      cardViewBtn.classList.add('table-view-active');
      tableViewBtn.classList.remove('table-view-active');
      localStorage.setItem('conversations-view', 'card');
    }
  }
  
  // Set up view toggle event listeners
  if (tableViewBtn && cardViewBtn) {
    tableViewBtn.addEventListener('click', switchToTableView);
    cardViewBtn.addEventListener('click', switchToCardView);
    
    // Restore saved view preference
    const savedView = localStorage.getItem('conversations-view');
    if (savedView === 'card') {
      switchToCardView();
    } else {
      switchToTableView(); // Default to table view
    }
  }
  
  // Table row click navigation
  const tableRows = document.querySelectorAll('.conversation-row');
  tableRows.forEach(row => {
    row.addEventListener('click', function(e) {
      // Don't navigate if clicking on action buttons
      if (e.target.closest('a')) return;
      
      const href = this.getAttribute('data-href');
      if (href) {
        window.location.href = href;
      }
    });
  });
  
  // Server-side table sorting functionality
  function handleColumnSort(column) {
    const urlParams = new URLSearchParams(window.location.search);
    
    // Get current sort direction, toggle if same column
    const currentColumn = urlParams.get('sort_column') || 'created_at';
    const currentDirection = urlParams.get('sort_direction') || 'desc';
    
    let newDirection = 'asc';
    if (column === currentColumn) {
      newDirection = currentDirection === 'asc' ? 'desc' : 'asc';
    }
    
    // Update URL parameters
    urlParams.set('sort_column', column);
    urlParams.set('sort_direction', newDirection);
    urlParams.set('page', '1'); // Reset to first page when sorting
    
    // Navigate to new URL
    window.location.search = urlParams.toString();
  }
  
  // Add click listeners to sortable headers
  document.querySelectorAll('th[data-sort]').forEach(header => {
    header.addEventListener('click', function() {
      const column = this.getAttribute('data-sort');
      handleColumnSort(column);
    });
  });

  // Page size selector functionality
  const pageSizeSelector = document.getElementById('page-size-selector');
  if (pageSizeSelector) {
    pageSizeSelector.addEventListener('change', function() {
      const urlParams = new URLSearchParams(window.location.search);
      urlParams.set('per_page', this.value);
      urlParams.set('page', '1'); // Reset to first page when changing page size
      window.location.search = urlParams.toString();
    });
  }

  // Quick search functionality (client-side filtering of current page)
  const quickSearch = document.getElementById('quick-search');
  const clearQuickSearch = document.getElementById('clear-quick-search');
  
  function filterConversations(searchTerm) {
    const rows = document.querySelectorAll('.conversation-row');
    const cards = document.querySelectorAll('#card-view .conversation-item');
    
    const term = searchTerm.toLowerCase();
    let visibleCount = 0;
    
    // Filter table rows
    rows.forEach(row => {
      const titleCell = row.querySelector('.font-medium');
      const sourceCell = row.querySelector('.inline-flex');
      
      const titleText = titleCell ? titleCell.textContent.toLowerCase() : '';
      const sourceText = sourceCell ? sourceCell.textContent.toLowerCase() : '';
      
      const isVisible = titleText.includes(term) || sourceText.includes(term);
      row.style.display = isVisible ? '' : 'none';
      
      if (isVisible) visibleCount++;
    });
    
    // Filter card views
    cards.forEach(card => {
      const titleElement = card.querySelector('h3');
      const sourceElement = card.querySelector('.attribute-badge');
      
      const titleText = titleElement ? titleElement.textContent.toLowerCase() : '';
      const sourceText = sourceElement ? sourceElement.textContent.toLowerCase() : '';
      
      const isVisible = titleText.includes(term) || sourceText.includes(term);
      card.style.display = isVisible ? '' : 'none';
    });
    
    // Update results summary
    const resultsDiv = document.querySelector('.text-sm.text-gray-600');
    if (resultsDiv && searchTerm) {
      const originalText = resultsDiv.innerHTML;
      if (!originalText.includes('(filtered)')) {
        resultsDiv.innerHTML = `${originalText} <span class="text-purple-600">(filtered: ${visibleCount} shown)</span>`;
      }
    }
  }
  
  function clearQuickFilter() {
    const rows = document.querySelectorAll('.conversation-row');
    const cards = document.querySelectorAll('#card-view .conversation-item');
    
    // Show all rows and cards
    rows.forEach(row => row.style.display = '');
    cards.forEach(card => card.style.display = '');
    
    // Clear search input
    if (quickSearch) quickSearch.value = '';
    
    // Reset results summary
    const resultsDiv = document.querySelector('.text-sm.text-gray-600');
    if (resultsDiv) {
      resultsDiv.innerHTML = resultsDiv.innerHTML.replace(/ <span class="text-purple-600">\(filtered:.*?\)<\/span>/, '');
    }
  }
  
  if (quickSearch) {
    quickSearch.addEventListener('input', function() {
      filterConversations(this.value);
    });
    
    quickSearch.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        clearQuickFilter();
      }
    });
  }
  
  if (clearQuickSearch) {
    clearQuickSearch.addEventListener('click', clearQuickFilter);
  }
  
  // Hover tooltips for conversation preview
  let tooltipTimeout;
  
  function createTooltip(conversationId) {
    const tooltip = document.createElement('div');
    tooltip.className = 'conversation-tooltip fixed z-50 bg-gray-900 text-white p-4 rounded-lg shadow-lg max-w-sm';
    tooltip.style.pointerEvents = 'none';
    
    tooltip.innerHTML = `
      <div class="space-y-2">
        <div class="font-medium text-blue-200">First Message:</div>
        <div class="text-sm">Loading preview...</div>
        <div class="font-medium text-green-200 mt-2">First Response:</div>
        <div class="text-sm">Loading preview...</div>
      </div>
    `;
    
    document.body.appendChild(tooltip);
    
    // Fetch preview data
    fetch(`/conversations/${conversationId}/preview.json`)
      .then(response => response.json())
      .then(data => {
        const firstMessageDiv = tooltip.querySelector('.space-y-2 div:nth-child(2)');
        const firstResponseDiv = tooltip.querySelector('.space-y-2 div:nth-child(4)');
        
        if (data.first_message) {
          firstMessageDiv.innerHTML = `
            <div class="text-sm">${data.first_message.content}</div>
            ${data.first_message.timestamp ? `<div class="text-xs text-gray-400 mt-1">${data.first_message.timestamp}</div>` : ''}
          `;
        } else {
          firstMessageDiv.innerHTML = '<div class="text-sm text-gray-400">No user message found</div>';
        }
        
        if (data.first_response) {
          firstResponseDiv.innerHTML = `
            <div class="text-sm">${data.first_response.content}</div>
            ${data.first_response.timestamp ? `<div class="text-xs text-gray-400 mt-1">${data.first_response.timestamp}</div>` : ''}
          `;
        } else {
          firstResponseDiv.innerHTML = '<div class="text-sm text-gray-400">No assistant response found</div>';
        }
      })
      .catch(error => {
        console.error('Error fetching conversation preview:', error);
        tooltip.innerHTML = `
          <div class="space-y-2">
            <div class="text-sm text-red-200">Error loading preview</div>
          </div>
        `;
      });
    
    return tooltip;
  }
  
  function showTooltip(e, conversationId) {
    clearTimeout(tooltipTimeout);
    tooltipTimeout = setTimeout(() => {
      const existingTooltip = document.querySelector('.conversation-tooltip');
      if (existingTooltip) existingTooltip.remove();
      
      const tooltip = createTooltip(conversationId);
      
      // Position tooltip
      const rect = e.target.getBoundingClientRect();
      tooltip.style.left = (rect.left + window.scrollX + 10) + 'px';
      tooltip.style.top = (rect.top + window.scrollY - tooltip.offsetHeight - 10) + 'px';
      
      // Ensure tooltip stays within viewport
      const tooltipRect = tooltip.getBoundingClientRect();
      if (tooltipRect.right > window.innerWidth) {
        tooltip.style.left = (window.innerWidth - tooltipRect.width - 10) + 'px';
      }
      if (tooltipRect.top < 0) {
        tooltip.style.top = (rect.bottom + window.scrollY + 10) + 'px';
      }
    }, 500); // 500ms delay before showing tooltip
  }
  
  function hideTooltip() {
    clearTimeout(tooltipTimeout);
    const tooltip = document.querySelector('.conversation-tooltip');
    if (tooltip) tooltip.remove();
  }
  
  // Add hover listeners to conversation rows
  document.querySelectorAll('.conversation-row').forEach(row => {
    row.addEventListener('mouseenter', function(e) {
      const conversationId = this.getAttribute('data-conversation-id');
      showTooltip(e, conversationId);
    });
    
    row.addEventListener('mouseleave', hideTooltip);
  });
});

// Add CSS for view toggle states
const style = document.createElement('style');
style.textContent = `
  .table-view-active {
    background-color: #3b82f6 !important;
    color: white !important;
  }
  
  .conversation-tooltip {
    animation: fadeIn 0.2s ease-in;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(5px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .sort-indicator {
    margin-left: 4px;
    font-weight: bold;
  }
`;
document.head.appendChild(style);
</script>