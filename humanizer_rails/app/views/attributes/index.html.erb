<div class="container mx-auto px-4 py-8">
  <!-- Header Section -->
  <div class="bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg p-8 mb-8">
    <h1 class="text-4xl font-bold mb-4">🔬 Semantic Attribute Laboratory</h1>
    <p class="text-xl opacity-90">Interactive SIC-POVM Probe Configuration & Allegory Engine Controls</p>
    <p class="text-sm mt-2 opacity-75">
      Configure semantic measurement protocols for narrative transformation
    </p>
  </div>

  <!-- Quantum Control Panel -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
    <!-- Semantic Probe Configuration -->
    <div class="lg:col-span-2">
      <div class="allegory-card">
        <h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center">
          ⚛️ SIC-POVM Semantic Probes
          <span class="ml-2 text-sm bg-purple-100 text-purple-800 px-2 py-1 rounded-full">16 Dimensions</span>
        </h2>
        
        <!-- Probe Grid -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <% @semantic_probe_categories.each_with_index do |category, index| %>
            <div class="semantic-probe" data-probe="<%= category[:key] %>">
              <div class="flex items-center justify-between mb-2">
                <span class="text-sm font-medium text-gray-700"><%= category[:icon] %> <%= category[:name] %></span>
                <span class="probe-value" data-value="<%= category[:value] %>"><%= sprintf("%.2f", category[:value]) %></span>
              </div>
              
              <!-- Interactive Slider -->
              <div class="mb-2">
                <input type="range" 
                       min="0" max="1" step="0.01" 
                       value="<%= category[:value] %>"
                       class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                       data-probe-slider="<%= category[:key] %>">
              </div>
              
              <!-- Coherence Indicator -->
              <div class="coherence-meter">
                <div class="coherence-bar bg-gradient-to-r from-blue-400 to-purple-500" 
                     style="width: <%= (category[:coherence] * 100).round %>%"></div>
              </div>
            </div>
          <% end %>
        </div>

        <!-- Global Coherence Status -->
        <div class="border-t pt-4">
          <div class="flex items-center justify-between mb-2">
            <span class="text-sm font-medium text-gray-700">🌐 Global Semantic Coherence</span>
            <span class="text-lg font-bold text-gray-800" id="global-coherence">0.85</span>
          </div>
          <div class="coherence-meter">
            <div class="coherence-bar bg-gradient-to-r from-green-400 to-blue-500" style="width: 85%"></div>
          </div>
          <p class="text-xs text-gray-500 mt-1">Born rule constraint: Σ|⟨ψᵢ|φ⟩|² = 1</p>
        </div>
      </div>
    </div>

    <!-- Allegory Attribute Controls -->
    <div>
      <div class="allegory-card">
        <h3 class="text-xl font-bold text-gray-800 mb-4">🎭 Allegory Operators</h3>
        
        <!-- Namespace Operator -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">
            🌍 Namespace (Ω)
          </label>
          <select class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent" 
                  data-attribute="namespace">
            <option value="universal">Universal Reality</option>
            <option value="scientific">Scientific Domain</option>
            <option value="mythological">Mythological Space</option>
            <option value="literary">Literary Universe</option>
            <option value="philosophical">Philosophical Realm</option>
            <option value="historical">Historical Context</option>
          </select>
        </div>

        <!-- Persona Operator -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">
            👤 Persona (Ψ)
          </label>
          <select class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent" 
                  data-attribute="persona">
            <option value="neutral">Neutral Observer</option>
            <option value="scholar">Academic Scholar</option>
            <option value="storyteller">Master Storyteller</option>
            <option value="scientist">Research Scientist</option>
            <option value="philosopher">Deep Philosopher</option>
            <option value="artist">Creative Artist</option>
          </select>
        </div>

        <!-- Style Operator -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">
            ✍️ Style (Σ)
          </label>
          <select class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent" 
                  data-attribute="style">
            <option value="natural">Natural Flow</option>
            <option value="academic">Academic Precision</option>
            <option value="narrative">Narrative Drama</option>
            <option value="poetic">Poetic Expression</option>
            <option value="technical">Technical Detail</option>
            <option value="conversational">Conversational Ease</option>
          </select>
        </div>

        <!-- Transformation Strength -->
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">
            ⚡ Transformation Intensity
          </label>
          <input type="range" min="0.1" max="1.0" step="0.1" value="0.5" 
                 class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                 data-attribute="intensity">
          <div class="flex justify-between text-xs text-gray-500 mt-1">
            <span>Subtle</span>
            <span>Moderate</span>
            <span>Profound</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Live Preview Section -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
    <!-- Input Text -->
    <div class="allegory-card">
      <h3 class="text-xl font-bold text-gray-800 mb-4">📝 Source Content</h3>
      <textarea class="w-full h-64 p-4 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent" 
                placeholder="Enter text to see live semantic analysis and transformation preview..."
                data-source-content></textarea>
      
      <!-- Quick Actions -->
      <div class="flex flex-wrap gap-2 mt-4">
        <button class="px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded-full hover:bg-blue-200 transition-colors" 
                data-action="analyze">
          🔍 Analyze Semantics
        </button>
        <button class="px-3 py-1 text-xs bg-green-100 text-green-800 rounded-full hover:bg-green-200 transition-colors" 
                data-action="preview">
          👁️ Preview Transform
        </button>
        <button class="px-3 py-1 text-xs bg-purple-100 text-purple-800 rounded-full hover:bg-purple-200 transition-colors" 
                data-action="save-preset">
          💾 Save Preset
        </button>
      </div>
    </div>

    <!-- Live Analysis -->
    <div class="allegory-card">
      <h3 class="text-xl font-bold text-gray-800 mb-4">🎯 Live Semantic Analysis</h3>
      <div id="semantic-analysis" class="h-64 overflow-y-auto">
        <div class="text-center text-gray-500 py-12">
          <div class="text-4xl mb-4">⚛️</div>
          <p>Enter text to see real-time semantic measurement</p>
          <p class="text-xs mt-2">SIC-POVM probes will activate automatically</p>
        </div>
      </div>
      
      <!-- Measurement Results -->
      <div class="border-t pt-4 mt-4">
        <div class="grid grid-cols-3 gap-4 text-center">
          <div>
            <div class="text-lg font-bold text-blue-600" id="semantic-complexity">--</div>
            <div class="text-xs text-gray-500">Complexity</div>
          </div>
          <div>
            <div class="text-lg font-bold text-green-600" id="narrative-density">--</div>
            <div class="text-xs text-gray-500">N-Density</div>
          </div>
          <div>
            <div class="text-lg font-bold text-purple-600" id="allegory-potential">--</div>
            <div class="text-xs text-gray-500">A-Potential</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Preset Management -->
  <div class="allegory-card">
    <h3 class="text-xl font-bold text-gray-800 mb-4">🎨 Transformation Presets</h3>
    
    <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
      <% @transformation_presets.each do |preset| %>
        <div class="border border-gray-200 rounded-lg p-3 hover:border-purple-300 cursor-pointer transition-colors" 
             data-preset="<%= preset[:id] %>">
          <div class="text-center mb-2">
            <div class="text-2xl"><%= preset[:icon] %></div>
            <div class="text-sm font-medium text-gray-800"><%= preset[:name] %></div>
          </div>
          <div class="text-xs text-gray-500">
            <div><%= preset[:namespace] %></div>
            <div><%= preset[:persona] %></div>
            <div><%= preset[:style] %></div>
          </div>
        </div>
      <% end %>
    </div>

    <!-- Custom Preset Creation -->
    <div class="border-t pt-4">
      <div class="flex items-center gap-4">
        <input type="text" placeholder="Preset name..." 
               class="flex-1 p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent">
        <button class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
          💾 Save Current Configuration
        </button>
      </div>
    </div>
  </div>

  <!-- Action Buttons -->
  <div class="flex justify-center gap-4 mt-8">
    <button class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2">
      🚀 Apply to Conversation
    </button>
    <button class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2">
      📖 Create Book with Attributes
    </button>
    <button class="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center gap-2">
      ⚗️ Run Full Projection
    </button>
  </div>
</div>

<!-- Include Attributes JavaScript -->
<%= javascript_include_tag 'attributes' %>

<!-- Inline JavaScript for Integration -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Real-time semantic probe updates
  const probeSliders = document.querySelectorAll('[data-probe-slider]');
  const sourceContent = document.querySelector('[data-source-content]');
  
  probeSliders.forEach(slider => {
    slider.addEventListener('input', function() {
      const value = this.value;
      const probe = this.dataset.probeSlider;
      const probeValue = this.closest('.semantic-probe').querySelector('.probe-value');
      probeValue.textContent = parseFloat(value).toFixed(2);
      
      // Update coherence calculation
      updateGlobalCoherence();
      
      // If there's content, trigger re-analysis
      if (sourceContent.value.trim()) {
        analyzeContent();
      }
    });
  });

  // Live content analysis
  sourceContent?.addEventListener('input', debounce(analyzeContent, 500));

  function analyzeContent() {
    const content = sourceContent.value.trim();
    if (!content) return;

    // Simulate semantic analysis (replace with actual API call)
    const analysis = simulateSemanticAnalysis(content);
    updateAnalysisDisplay(analysis);
  }

  function simulateSemanticAnalysis(content) {
    const words = content.split(/\s+/).length;
    const sentences = content.split(/[.!?]+/).length;
    const complexity = Math.min(1.0, words / 100);
    const density = Math.min(1.0, sentences / 20);
    const potential = (complexity + density) / 2;

    return { complexity, density, potential };
  }

  function updateAnalysisDisplay(analysis) {
    document.getElementById('semantic-complexity').textContent = analysis.complexity.toFixed(2);
    document.getElementById('narrative-density').textContent = analysis.density.toFixed(2);
    document.getElementById('allegory-potential').textContent = analysis.potential.toFixed(2);
  }

  function updateGlobalCoherence() {
    const sliders = document.querySelectorAll('[data-probe-slider]');
    let sum = 0;
    sliders.forEach(slider => {
      sum += parseFloat(slider.value) ** 2;
    });
    const coherence = Math.sqrt(sum / sliders.length);
    document.getElementById('global-coherence').textContent = coherence.toFixed(2);
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
});
</script>
